package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"backend/domain"
	"backend/graph"
	"context"
)

func (r *mutationResolver) CreateTechStack(ctx context.Context, input domain.TechStackInput) (*domain.TechStack, error) {
	techStack, err := r.Reg.TechStackUsecase().Create(input)
	if err != nil {
		return nil, err
	}
	return techStack, nil
}

func (r *mutationResolver) UpdateTechStack(ctx context.Context, id uint, input domain.TechStackInput) (*domain.TechStack, error) {
	techStack, err := r.Reg.TechStackUsecase().Update(id, input)
	if err != nil {
		return nil, err
	}
	return techStack, nil
}

func (r *mutationResolver) DeleteTechStack(ctx context.Context, id uint) (*domain.TechStack, error) {
	techStack, err := r.Reg.TechStackUsecase().Delete(id)
	if err != nil {
		return nil, err
	}
	return techStack, nil
}

func (r *queryResolver) TechStacks(ctx context.Context) ([]*domain.TechStack, error) {
	techStacks, err := r.Reg.TechStackUsecase().List()
	if err != nil {
		return nil, err
	}
	return techStacks, nil
}

func (r *queryResolver) TechStack(ctx context.Context, id uint) (*domain.TechStack, error) {
	techStack, err := r.Reg.TechStackUsecase().Find(id)
	if err != nil {
		return nil, err
	}
	return techStack, nil
}

func (r *techStackResolver) Technology(ctx context.Context, obj *domain.TechStack) (*domain.Technology, error) {
	technology, err := r.Reg.TechnologyUsecase().Find(obj.TechnologyID)
	if err != nil {
		return nil, err
	}
	return technology, nil
}

func (r *Resolver) TechStack() graph.TechStackResolver { return &techStackResolver{r} }

type techStackResolver struct{ *Resolver }
