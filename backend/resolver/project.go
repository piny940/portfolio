package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"backend/domain"
	"backend/graph"
	"context"
)

func (r *mutationResolver) CreateProject(ctx context.Context, input domain.ProjectInput) (*domain.Project, error) {
	project, err := r.Reg.ProjectUsecase().Create(input)
	if err != nil {
		return nil, err
	}
	return project, nil
}

func (r *mutationResolver) UpdateProject(ctx context.Context, input domain.ProjectInput) (*domain.Project, error) {
	project, err := r.Reg.ProjectUsecase().Update(input)
	if err != nil {
		return nil, err
	}
	return project, nil
}

func (r *mutationResolver) UpdateProjectOrder(ctx context.Context, input domain.UpdateProjectOrderInput) ([]*domain.Project, error) {
	projects, err := r.Reg.ProjectUsecase().UpdatePositions(input)
	if err != nil {
		return nil, err
	}
	return projects, nil
}

func (r *mutationResolver) DeleteProject(ctx context.Context, id string) (*domain.Project, error) {
	project, err := r.Reg.ProjectUsecase().Delete(id)
	if err != nil {
		return nil, err
	}
	return project, nil
}

func (r *mutationResolver) UpdateProjectTags(ctx context.Context, id string, tags []uint) ([]*domain.ProjectTag, error) {
	technologies, err := r.Reg.ProjectUsecase().UpdateTags(id, tags)
	if err != nil {
		return nil, err
	}
	return technologies, nil
}

func (r *projectResolver) Tags(ctx context.Context, obj *domain.Project) ([]*domain.ProjectTag, error) {
	technologies, err := r.Reg.ProjectUsecase().ListTags([]string{obj.ID})
	if err != nil {
		return nil, err
	}
	return technologies, nil
}

func (r *queryResolver) Projects(ctx context.Context) ([]*domain.Project, error) {
	projects, err := r.Reg.ProjectUsecase().List()
	if err != nil {
		return nil, err
	}
	return projects, nil
}

func (r *queryResolver) Project(ctx context.Context, id string) (*domain.Project, error) {
	project, err := r.Reg.ProjectUsecase().Find(id)
	if err != nil {
		return nil, err
	}
	return project, nil
}

func (r *Resolver) Project() graph.ProjectResolver { return &projectResolver{r} }

type projectResolver struct{ *Resolver }
